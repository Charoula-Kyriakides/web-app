"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchTowns = exports.fetchPosts = void 0;
const node_html_parser_1 = require("node-html-parser");
/**
 * Fetch all the posts for a given town (group) on Freecycle
 * @param town Town
 */
function fetchPosts(town) {
    return __awaiter(this, void 0, void 0, function* () {
        // Fetch the page with the data
        const res = yield fetch(`https://www.freecycle.org/town/${town}`);
        const data = yield res.text();
        const root = (0, node_html_parser_1.parse)(data);
        // Find the specific element that they inject it into
        const dataEl = root.querySelector("fc-data");
        if (!dataEl)
            throw "Could not find the data element, Freecyle website may have changed.";
        // Find the attribute containing data and validate it is correct
        const rawData = dataEl.getAttribute("data");
        if (!rawData)
            throw "Could not find the raw post data, Freecycle website may have changed.";
        return JSON.parse(rawData);
    });
}
exports.fetchPosts = fetchPosts;
/**
 * Fetch all the towns (groups) available on Freecycle
 * @returns Structured data
 */
function fetchTowns() {
    return __awaiter(this, void 0, void 0, function* () {
        // Fetch the page with the data
        const res = yield fetch("https://www.freecycle.org/find-towns");
        const data = yield res.text();
        const root = (0, node_html_parser_1.parse)(data);
        // Find the specific element that they inject it into
        const dataEl = root.querySelector(".flex-video");
        if (!dataEl)
            throw "Could not find the data element, Freecyle website may have changed.";
        // Find the attribute containing data and validate it is correct
        const rawJS = dataEl.getAttribute("onload");
        const prefix = "$emit('loadTowns', ";
        const suffix = ")";
        if (!rawJS)
            throw "Could not find the town data load function, Freecycle website may have changed.";
        if (!rawJS.startsWith(prefix))
            throw "Freecycle website has changed, cannot parse.";
        if (!rawJS.endsWith(suffix))
            throw "Freecycle website has changed, cannot parse.";
        // Parse the data
        const rawData = rawJS.substring(prefix.length, rawJS.length - suffix.length);
        return JSON.parse(rawData);
    });
}
exports.fetchTowns = fetchTowns;
